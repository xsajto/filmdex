name: Build and Deploy Docker Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY_URL: registry.sajboch.cz
  IMAGE_NAME: filmdex

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        include:
          - name: main
            dockerfile: docker/Dockerfile
            image-suffix: ""
          - name: tmdb-crawler
            dockerfile: docker/Dockerfile.tmdb
            image-suffix: "-tmdb"
          - name: api
            dockerfile: docker/Dockerfile.api
            image-suffix: "-api"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}${{ matrix.image-suffix }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Deploy Main Crawler
        run: |
          echo "Deploying main crawler image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}"
          # Add your deployment commands here
          # Example with docker run:
          # docker pull ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
          # docker stop filmdex-crawler || true
          # docker rm filmdex-crawler || true
          # docker run -d \
          #   --name filmdex-crawler \
          #   --restart unless-stopped \
          #   -e DATABASE_URL="file:/app/data/movies.db" \
          #   -e TMDB_API_KEY="your-tmdb-api-key" \
          #   -v filmdex-data:/app/data \
          #   -v filmdex-cache:/app/cache \
          #   ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}

      - name: Deploy API Server
        run: |
          echo "Deploying API server image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}-api:${{ github.ref_name }}-${{ github.sha }}"
          # Add your API deployment commands here
          # Example with docker run:
          # docker pull ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}-api:${{ github.ref_name }}-${{ github.sha }}
          # docker stop filmdex-api || true
          # docker rm filmdex-api || true
          # docker run -d \
          #   --name filmdex-api \
          #   --restart unless-stopped \
          #   -p 3000:3000 \
          #   -e DATABASE_URL="file:/app/data/movies.db" \
          #   -v filmdex-data:/app/data \
          #   ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}-api:${{ github.ref_name }}-${{ github.sha }}