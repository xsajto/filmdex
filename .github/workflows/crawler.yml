name: TMDB Crawler Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'src/crawlers/**'
      - 'src/shared/**'
      - 'src/types/**'
      - 'prisma/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches:
      - main
    paths:
      - 'src/crawlers/**'
      - 'src/shared/**'
      - 'src/types/**'
      - 'prisma/**'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:
    inputs:
      crawler_mode:
        description: 'Crawler mode (dev, production)'
        required: false
        default: 'dev'
        type: choice
        options:
        - dev
        - production
      resume_crawling:
        description: 'Resume previous crawling session'
        required: false
        default: false
        type: boolean

env:
  NODE_ENV: production
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

jobs:
  lint-and-test:
    name: Lint and Test Crawler
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Run linter
        run: npm run lint src/crawlers/ src/shared/ src/types/

      - name: Run tests
        run: npm test -- --testPathPattern=crawler
        continue-on-error: true

  build-crawler:
    name: Build Crawler
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crawler-build
          path: |
            dist/
            generated/
          retention-days: 7

  run-crawler:
    name: Run TMDB Crawler
    runs-on: ubuntu-latest
    needs: build-crawler
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    strategy:
      matrix:
        crawler-type: [movie, tv-series, person]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: crawler-build

      - name: Run TMDB Crawler (Development)
        if: inputs.crawler_mode == 'dev' || github.event_name == 'push'
        run: |
          if [ "${{ inputs.resume_crawling }}" == "true" ]; then
            npm run dev:tmdb:resume
          else
            npm run dev:tmdb
          fi
        timeout-minutes: 120
        continue-on-error: true

      - name: Run TMDB Crawler (Production)
        if: inputs.crawler_mode == 'production'
        run: npm run start:tmdb
        timeout-minutes: 240
        continue-on-error: true

      - name: Upload crawler logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crawler-logs-${{ matrix.crawler-type }}
          path: |
            logs/
            *.log
          retention-days: 14
          if-no-files-found: ignore

  deploy-crawler:
    name: Deploy Crawler
    runs-on: ubuntu-latest
    needs: [build-crawler, run-crawler]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_URL || 'registry.sajboch.cz' }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push Crawler Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.crawler
          platforms: linux/amd64
          push: true
          tags: |
            ${{ vars.REGISTRY_URL || 'registry.sajboch.cz' }}/filmdex-crawler:latest
            ${{ vars.REGISTRY_URL || 'registry.sajboch.cz' }}/filmdex-crawler:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/amd64